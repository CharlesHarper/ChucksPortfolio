{"ast":null,"code":"/* eslint no-case-declarations: \"off\" */\nimport global from 'global';\nexport default function jarallaxElement() {\n  var jarallax = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : global.jarallax;\n\n  if (typeof jarallax === 'undefined') {\n    return;\n  }\n\n  var Jarallax = jarallax.constructor; // redefine default methods\n\n  ['initImg', 'canInitParallax', 'init', 'destroy', 'clipContainer', 'coverImage', 'isVisible', 'onScroll', 'onResize'].forEach(function (key) {\n    var def = Jarallax.prototype[key];\n\n    Jarallax.prototype[key] = function () {\n      var self = this;\n      var args = arguments || [];\n\n      if (key === 'initImg' && self.$item.getAttribute('data-jarallax-element') !== null) {\n        self.options.type = 'element';\n        self.pureOptions.speed = self.$item.getAttribute('data-jarallax-element') || self.pureOptions.speed;\n      }\n\n      if (self.options.type !== 'element') {\n        return def.apply(self, args);\n      }\n\n      self.pureOptions.threshold = self.$item.getAttribute('data-threshold') || '';\n\n      switch (key) {\n        case 'init':\n          var speedArr = self.pureOptions.speed.split(' ');\n          self.options.speed = self.pureOptions.speed || 0;\n          self.options.speedY = speedArr[0] ? parseFloat(speedArr[0]) : 0;\n          self.options.speedX = speedArr[1] ? parseFloat(speedArr[1]) : 0;\n          var thresholdArr = self.pureOptions.threshold.split(' ');\n          self.options.thresholdY = thresholdArr[0] ? parseFloat(thresholdArr[0]) : null;\n          self.options.thresholdX = thresholdArr[1] ? parseFloat(thresholdArr[1]) : null;\n          def.apply(self, args); // restore background image if available.\n\n          var originalStylesTag = self.$item.getAttribute('data-jarallax-original-styles');\n\n          if (originalStylesTag) {\n            self.$item.setAttribute('style', originalStylesTag);\n          }\n\n          return true;\n\n        case 'onResize':\n          var defTransform = self.css(self.$item, 'transform');\n          self.css(self.$item, {\n            transform: ''\n          });\n          var rect = self.$item.getBoundingClientRect();\n          self.itemData = {\n            width: rect.width,\n            height: rect.height,\n            y: rect.top + self.getWindowData().y,\n            x: rect.left\n          };\n          self.css(self.$item, {\n            transform: defTransform\n          });\n          break;\n\n        case 'onScroll':\n          var wnd = self.getWindowData();\n          var centerPercent = (wnd.y + wnd.height / 2 - self.itemData.y - self.itemData.height / 2) / (wnd.height / 2);\n          var moveY = centerPercent * self.options.speedY;\n          var moveX = centerPercent * self.options.speedX;\n          var my = moveY;\n          var mx = moveX;\n          if (self.options.thresholdY !== null && moveY > self.options.thresholdY) my = 0;\n          if (self.options.thresholdX !== null && moveX > self.options.thresholdX) mx = 0;\n          self.css(self.$item, {\n            transform: \"translate3d(\".concat(mx, \"px,\").concat(my, \"px,0)\")\n          });\n          break;\n\n        case 'initImg':\n        case 'isVisible':\n        case 'clipContainer':\n        case 'coverImage':\n          return true;\n        // no default\n      }\n\n      return def.apply(self, args);\n    };\n  });\n}","map":{"version":3,"sources":["/Users/charlesharper/Desktop/Chuck2020/MDB-React-Pro-npm/node_modules/jarallax/src/jarallax-element.esm.js"],"names":["global","jarallaxElement","jarallax","Jarallax","constructor","forEach","key","def","prototype","self","args","arguments","$item","getAttribute","options","type","pureOptions","speed","apply","threshold","speedArr","split","speedY","parseFloat","speedX","thresholdArr","thresholdY","thresholdX","originalStylesTag","setAttribute","defTransform","css","transform","rect","getBoundingClientRect","itemData","width","height","y","top","getWindowData","x","left","wnd","centerPercent","moveY","moveX","my","mx"],"mappings":"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","sourcesContent":["/* eslint no-case-declarations: \"off\" */\nimport global from 'global';\n\nexport default function jarallaxElement(jarallax = global.jarallax) {\n    if (typeof jarallax === 'undefined') {\n        return;\n    }\n\n    const Jarallax = jarallax.constructor;\n\n    // redefine default methods\n    [\n        'initImg',\n        'canInitParallax',\n        'init',\n        'destroy',\n        'clipContainer',\n        'coverImage',\n        'isVisible',\n        'onScroll',\n        'onResize',\n    ].forEach((key) => {\n        const def = Jarallax.prototype[key];\n        Jarallax.prototype[key] = function () {\n            const self = this;\n            const args = arguments || [];\n\n            if (key === 'initImg' && self.$item.getAttribute('data-jarallax-element') !== null) {\n                self.options.type = 'element';\n                self.pureOptions.speed = self.$item.getAttribute('data-jarallax-element') || self.pureOptions.speed;\n            }\n            if (self.options.type !== 'element') {\n                return def.apply(self, args);\n            }\n\n            self.pureOptions.threshold = self.$item.getAttribute('data-threshold') || '';\n\n            switch (key) {\n            case 'init':\n                const speedArr = self.pureOptions.speed.split(' ');\n                self.options.speed = self.pureOptions.speed || 0;\n                self.options.speedY = speedArr[0] ? parseFloat(speedArr[0]) : 0;\n                self.options.speedX = speedArr[1] ? parseFloat(speedArr[1]) : 0;\n\n                const thresholdArr = self.pureOptions.threshold.split(' ');\n                self.options.thresholdY = thresholdArr[0] ? parseFloat(thresholdArr[0]) : null;\n                self.options.thresholdX = thresholdArr[1] ? parseFloat(thresholdArr[1]) : null;\n\n                def.apply(self, args);\n\n                // restore background image if available.\n                const originalStylesTag = self.$item.getAttribute('data-jarallax-original-styles');\n                if (originalStylesTag) {\n                    self.$item.setAttribute('style', originalStylesTag);\n                }\n\n                return true;\n            case 'onResize':\n                const defTransform = self.css(self.$item, 'transform');\n                self.css(self.$item, { transform: '' });\n                const rect = self.$item.getBoundingClientRect();\n                self.itemData = {\n                    width: rect.width,\n                    height: rect.height,\n                    y: rect.top + self.getWindowData().y,\n                    x: rect.left,\n                };\n                self.css(self.$item, { transform: defTransform });\n                break;\n            case 'onScroll':\n                const wnd = self.getWindowData();\n                const centerPercent = (wnd.y + wnd.height / 2 - self.itemData.y - self.itemData.height / 2) / (wnd.height / 2);\n                const moveY = centerPercent * self.options.speedY;\n                const moveX = centerPercent * self.options.speedX;\n                let my = moveY;\n                let mx = moveX;\n                if (self.options.thresholdY !== null && moveY > self.options.thresholdY) my = 0;\n                if (self.options.thresholdX !== null && moveX > self.options.thresholdX) mx = 0;\n                self.css(self.$item, { transform: `translate3d(${mx}px,${my}px,0)` });\n                break;\n            case 'initImg':\n            case 'isVisible':\n            case 'clipContainer':\n            case 'coverImage':\n                return true;\n            // no default\n            }\n            return def.apply(self, args);\n        };\n    });\n}\n"]},"metadata":{},"sourceType":"module"}